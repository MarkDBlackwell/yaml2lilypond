<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo (http://webpages.charter.net/edreamleo/front.html) -->
<?xml-stylesheet ekr_test?>
<leo_file xmlns:leo="http://www.leo-editor.org/2011/leo" >
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="georgesawyer.20110802081402.1951" a="E"><vh>yaml2lilypond project</vh>
<v t="georgesawyer.20110825192845.1922"><vh>&lt;&lt; readme &gt;&gt;</vh></v>
<v t="georgesawyer.20110825192845.1468"><vh>DONE</vh>
<v t="georgesawyer.20110802081402.2006"><vh>add function to find all YAML files</vh></v>
<v t="georgesawyer.20110802081402.2007"><vh>chop up with Leo</vh></v>
<v t="georgesawyer.20110819095338.1609"><vh>&lt;&lt; purpose &gt;&gt;</vh></v>
<v t="georgesawyer.20110827101921.1492"><vh>move current directory to App class</vh>
<v t="markdblackwell.20110823170927.1383"><vh>App</vh>
<v t="markdblackwell.20110823170927.1384"><vh>&lt;&lt; class accessor &gt;&gt;</vh></v>
<v t="markdblackwell.20110823170927.1386"><vh>&lt;&lt; script &gt;&gt;</vh></v>
</v>
<v t="markdblackwell.20110823170927.1367"><vh>&lt;&lt; constant &gt;&gt;</vh></v>
</v>
</v>
<v t="georgesawyer.20110802081402.2005" a="E"><vh>TODO</vh>
<v t="georgesawyer.20110827101921.1493" a="E"><vh>actualize tests</vh>
<v t="georgesawyer.20110827152321.1533" a="E"><vh>@path test/unit</vh>
<v t="georgesawyer.20110827152321.1531" a="E"><vh>@path app</vh>
<v t="georgesawyer.20110827101921.1519"><vh>&lt;&lt; app code tests &gt;&gt;</vh>
<v t="georgesawyer.20110827101921.1500"><vh>some test</vh>
<v t="georgesawyer.20110827101921.1520"><vh>code</vh></v>
<v t="georgesawyer.20110827101921.1521"><vh>prints</vh></v>
</v>
<v t="georgesawyer.20110827101921.1505"><vh>@shadow app_test.rb</vh></v>
<v t="georgesawyer.20110827101921.1543"><vh>@shadow lilypond_test.rb</vh></v>
<v t="georgesawyer.20110827101921.1544"><vh>@shadow main_test.rb</vh></v>
<v t="georgesawyer.20110827101921.1545"><vh>@shadow measure_test.rb</vh></v>
<v t="georgesawyer.20110827101921.1546"><vh>@shadow movement_test.rb</vh></v>
<v t="georgesawyer.20110827101921.1547"><vh>@shadow template_test.rb</vh></v>
<v t="georgesawyer.20110827101921.1548"><vh>@shadow use_yaml_test.rb</vh></v>
<v t="georgesawyer.20110827101921.1549"><vh>@shadow variable_request_test.rb</vh></v>
</v>
</v>
<v t="georgesawyer.20110827152321.1532" a="E"><vh>@path surroundings</vh>
<v t="georgesawyer.20110827101921.1518" a="E"><vh>&lt;&lt; surroundings tests &gt;&gt;</vh>
<v t="georgesawyer.20110827101921.1510"><vh>@shadow unshift.rb</vh></v>
<v t="georgesawyer.20110827101921.1509"><vh>@shadow yaml_test.rb</vh></v>
<v t="georgesawyer.20110827101921.1508"><vh>@shadow flatten_test.rb</vh></v>
</v>
</v>
</v>
</v>
<v t="georgesawyer.20110825192845.1469"><vh>make project a Ruby gem</vh></v>
<v t="georgesawyer.20110819095338.1610"><vh>&lt;&lt; usage &gt;&gt;</vh></v>
</v>
<v t="georgesawyer.20110825192845.1464"><vh>fragment</vh>
<v t="georgesawyer.20110825192845.1462"><vh>accessor</vh>
<v t="markdblackwell.20110823170927.1300"><vh>&lt;&lt; accessor &gt;&gt;</vh></v>
<v t="markdblackwell.20110823170927.1368"><vh>&lt;&lt; accessor &gt;&gt;</vh></v>
<v t="markdblackwell.20110823170927.1322"><vh>&lt;&lt; accessor &gt;&gt;</vh></v>
</v>
<v t="georgesawyer.20110825192845.1465" a="E"><vh>class</vh>
<v t="markdblackwell.20110823170927.1383"></v>
<v t="markdblackwell.20110823170927.1258"><vh>LilyPond</vh>
<v t="markdblackwell.20110823170927.1259"><vh>&lt;&lt; constant &gt;&gt;</vh></v>
<v t="markdblackwell.20110823170927.1260"><vh>method</vh>
<v t="markdblackwell.20110823170927.1261"><vh>public class</vh>
<v t="markdblackwell.20110826175603.1481"><vh>output_extension</vh></v>
<v t="markdblackwell.20110823170927.1262"><vh>rest</vh></v>
<v t="markdblackwell.20110823170927.1263"><vh>write_input_for_lilypond</vh></v>
</v>
</v>
</v>
<v t="markdblackwell.20110823170927.1274"><vh>Main</vh>
<v t="markdblackwell.20110823170927.1275"><vh>&lt;&lt; class accessor &gt;&gt;</vh></v>
<v t="markdblackwell.20110823170927.1277"><vh>method</vh>
<v t="markdblackwell.20110823170927.1278"><vh>public class</vh>
<v t="markdblackwell.20110823170927.1279"><vh>extract_three_keys</vh></v>
<v t="markdblackwell.20110823170927.1280"><vh>get_sole_yaml_document</vh></v>
<v t="markdblackwell.20110823170927.1281"><vh>run</vh></v>
<v t="markdblackwell.20110823170927.1282"><vh>run_lilypond</vh></v>
<v t="markdblackwell.20110823170927.1283"><vh>run_requests</vh></v>
</v>
</v>
</v>
<v t="markdblackwell.20110823170927.1298"><vh>Measure</vh>
<v t="markdblackwell.20110823170927.1299"><vh>&lt;&lt; constant &gt;&gt;</vh></v>
<v t="markdblackwell.20110823170927.1300"></v>
<v t="markdblackwell.20110823170927.1301"><vh>&lt;&lt; single line method &gt;&gt;</vh>
<v t="markdblackwell.20110823170927.1302"><vh>content_no_barlines=</vh></v>
<v t="markdblackwell.20110823170927.1303"><vh>content=</vh></v>
<v t="markdblackwell.20110823170927.1304"><vh>prefix</vh></v>
<v t="markdblackwell.20110823170927.1305"><vh>prefix_barlines</vh></v>
<v t="markdblackwell.20110823170927.1306"><vh>suffix</vh></v>
<v t="markdblackwell.20110823170927.1307"><vh>suffix_barlines</vh></v>
</v>
<v t="markdblackwell.20110823170927.1308"><vh>method</vh>
<v t="markdblackwell.20110823170927.1309"><vh>public</vh>
<v t="markdblackwell.20110823170927.1310"><vh>initialize</vh></v>
<v t="markdblackwell.20110823170927.1311"><vh>to_s</vh></v>
</v>
</v>
</v>
<v t="markdblackwell.20110823170927.1366"><vh>Movement</vh>
<v t="markdblackwell.20110823170927.1367"></v>
<v t="markdblackwell.20110823170927.1368"></v>
<v t="markdblackwell.20110823170927.1369"><vh>method</vh>
<v t="markdblackwell.20110823170927.1370"><vh>public class</vh>
<v t="markdblackwell.20110823170927.1371"><vh>names</vh>
<v t="markdblackwell.20110827081420.1493"><vh>&lt;&lt; rdoc &gt;&gt;</vh></v>
</v>
</v>
<v t="markdblackwell.20110823170927.1372"><vh>public</vh>
<v t="markdblackwell.20110823170927.1373"><vh>initialize</vh></v>
<v t="markdblackwell.20110823170927.1374"><vh>is_template</vh></v>
</v>
<v t="markdblackwell.20110823170927.1375"><vh>private</vh>
<v t="markdblackwell.20110823170927.1376"><vh>get_filepaths</vh>
<v t="markdblackwell.20110827081420.1506"><vh>&lt;&lt; rdoc &gt;&gt;</vh></v>
</v>
</v>
</v>
</v>
<v t="markdblackwell.20110823170927.1320" a="E"><vh>Template</vh>
<v t="markdblackwell.20110823170927.1321"><vh>&lt;&lt; constant &gt;&gt;</vh></v>
<v t="markdblackwell.20110823170927.1322"></v>
<v t="markdblackwell.20110823170927.1323" a="E"><vh>method</vh>
<v t="markdblackwell.20110823170927.1324" a="E"><vh>public</vh>
<v t="georgesawyer.20110827101921.1628"><vh>flatten</vh></v>
<v t="markdblackwell.20110823170927.1325"><vh>create_measures</vh></v>
<v t="markdblackwell.20110823170927.1326"><vh>initialize</vh></v>
<v t="markdblackwell.20110823170927.1327"><vh>initialize_copy</vh></v>
</v>
</v>
</v>
<v t="markdblackwell.20110823170927.1335"><vh>UseYaml</vh>
<v t="markdblackwell.20110823170927.1336"><vh>&lt;&lt; class accessor &gt;&gt;</vh></v>
<v t="markdblackwell.20110823170927.1338"><vh>&lt;&lt; script &gt;&gt;</vh></v>
<v t="markdblackwell.20110823170927.1339"><vh>method</vh>
<v t="markdblackwell.20110823170927.1340"><vh>public class</vh>
<v t="markdblackwell.20110823170927.1341"><vh>get_yaml_documents</vh></v>
</v>
</v>
</v>
<v t="markdblackwell.20110823170927.1348"><vh>VariableRequest</vh>
<v t="markdblackwell.20110823170927.1349"><vh>&lt;&lt; class accessor &gt;&gt;</vh></v>
<v t="markdblackwell.20110823170927.1350"><vh>&lt;&lt; script &gt;&gt;</vh></v>
<v t="markdblackwell.20110823170927.1351"><vh>method</vh>
<v t="markdblackwell.20110823170927.1352"><vh>public class</vh>
<v t="markdblackwell.20110823170927.1353"><vh>execute_method</vh></v>
</v>
</v>
</v>
</v>
<v t="georgesawyer.20110825192845.1460"><vh>class accessor</vh>
<v t="markdblackwell.20110823170927.1336"></v>
<v t="markdblackwell.20110823170927.1349"></v>
<v t="markdblackwell.20110823170927.1384"></v>
<v t="markdblackwell.20110823170927.1275"></v>
</v>
<v t="georgesawyer.20110825192845.1456"><vh>constants</vh>
<v t="markdblackwell.20110823170927.1299"></v>
<v t="markdblackwell.20110823170927.1321"></v>
<v t="markdblackwell.20110823170927.1259"></v>
<v t="markdblackwell.20110823170927.1367"></v>
</v>
<v t="georgesawyer.20110825192845.1467"><vh>method</vh>
<v t="georgesawyer.20110827101921.1628"></v>
<v t="markdblackwell.20110823170927.1303"></v>
<v t="markdblackwell.20110823170927.1302"></v>
<v t="markdblackwell.20110823170927.1325"></v>
<v t="markdblackwell.20110823170927.1353"></v>
<v t="markdblackwell.20110823170927.1279"></v>
<v t="markdblackwell.20110823170927.1376"></v>
<v t="markdblackwell.20110823170927.1280"></v>
<v t="markdblackwell.20110823170927.1341"></v>
<v t="markdblackwell.20110823170927.1326"></v>
<v t="markdblackwell.20110823170927.1373"></v>
<v t="markdblackwell.20110823170927.1327"></v>
<v t="markdblackwell.20110823170927.1374"></v>
<v t="markdblackwell.20110823170927.1371"></v>
<v t="markdblackwell.20110826175603.1481"></v>
<v t="markdblackwell.20110823170927.1304"></v>
<v t="markdblackwell.20110823170927.1305"></v>
<v t="markdblackwell.20110823170927.1262"></v>
<v t="markdblackwell.20110823170927.1281"></v>
<v t="markdblackwell.20110823170927.1282"></v>
<v t="markdblackwell.20110823170927.1283"></v>
<v t="markdblackwell.20110823170927.1306"></v>
<v t="markdblackwell.20110823170927.1307"></v>
<v t="markdblackwell.20110823170927.1311"></v>
<v t="markdblackwell.20110823170927.1263"></v>
</v>
<v t="georgesawyer.20110825192845.1463" a="E"><vh>require</vh>
<v t="markdblackwell.20110823170927.1392"><vh>&lt;&lt; require &gt;&gt;</vh></v>
</v>
<v t="georgesawyer.20110825192845.1461"><vh>script</vh>
<v t="markdblackwell.20110823170927.1394"><vh>&lt;&lt; script &gt;&gt;</vh></v>
<v t="markdblackwell.20110823170927.1338"></v>
<v t="markdblackwell.20110823170927.1350"></v>
<v t="markdblackwell.20110823170927.1386"></v>
</v>
</v>
<v t="georgesawyer.20110802081402.1953"><vh>external files</vh>
<v t="georgesawyer.20110825192845.1923"><vh>@path .</vh>
<v t="georgesawyer.20110825192845.1920"><vh>@shadow README.md</vh></v>
</v>
<v t="georgesawyer.20110827101921.1494"><vh>@path test/unit</vh>
<v t="georgesawyer.20110827101921.1552"><vh>@path surroundings</vh>
<v t="georgesawyer.20110827101921.1518" a="E"></v>
</v>
<v t="georgesawyer.20110827101921.1553"><vh>@path app</vh>
<v t="georgesawyer.20110827101921.1519"></v>
</v>
</v>
<v t="markdblackwell.20110823170927.1230"><vh>@path my_doc</vh>
<v t="georgesawyer.20110819095338.1333" a="E"><vh>@shadow comment_block.txt</vh></v>
</v>
<v t="markdblackwell.20110823170927.1229"><vh>@path app</vh>
<v t="markdblackwell.20110823170927.1382"><vh>@shadow app.rb</vh></v>
<v t="markdblackwell.20110823170927.1391"><vh>@shadow generate.rb</vh></v>
<v t="markdblackwell.20110823170927.1239"><vh>@shadow lily_pond.rb</vh></v>
<v t="markdblackwell.20110823170927.1241"><vh>@shadow main.rb</vh></v>
<v t="markdblackwell.20110823170927.1243"><vh>@shadow measure.rb</vh></v>
<v t="markdblackwell.20110823170927.1354"><vh>@shadow movement.rb</vh></v>
<v t="markdblackwell.20110823170927.1245"
expanded="markdblackwell.20110823170927.1320,markdblackwell.20110823170927.1323,markdblackwell.20110823170927.1324,"><vh>@shadow template.rb</vh></v>
<v t="markdblackwell.20110823170927.1247"><vh>@shadow use_yaml.rb</vh></v>
<v t="markdblackwell.20110823170927.1249"><vh>@shadow variable_request.rb</vh></v>
</v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="georgesawyer.20110802081402.1951">Convert YAML to LilyPond input format</t>
<t tx="georgesawyer.20110802081402.1953">@path .</t>
<t tx="georgesawyer.20110802081402.2005"></t>
<t tx="georgesawyer.20110802081402.2006"># Look at this for finding YAML files:
App.root.join(*TEST_GROUP).find do |path|
  b=path.basename.to_s
  Find.prune if path.directory? &amp;&amp; ?.==b[0]
  paths &lt;&lt; path.dirname.join(b.chomp '.rb') if REQUIRE_TEST_BASENAME==b
end</t>
<t tx="georgesawyer.20110802081402.2007"></t>
<t tx="georgesawyer.20110819095338.1609">Purpose: improve usability of LilyPond by means of the YAML entry format.
Generate LilyPond input from YAML.</t>
<t tx="georgesawyer.20110819095338.1610">Example usage: TODO</t>
<t tx="georgesawyer.20110825192845.1456"></t>
<t tx="georgesawyer.20110825192845.1460"></t>
<t tx="georgesawyer.20110825192845.1461"></t>
<t tx="georgesawyer.20110825192845.1462"></t>
<t tx="georgesawyer.20110825192845.1463"></t>
<t tx="georgesawyer.20110825192845.1464"></t>
<t tx="georgesawyer.20110825192845.1465"></t>
<t tx="georgesawyer.20110825192845.1467"></t>
<t tx="georgesawyer.20110825192845.1468"></t>
<t tx="georgesawyer.20110825192845.1469"></t>
<t tx="georgesawyer.20110825192845.1922">#yaml2lilypond

Program works, but the documentation is NOT READY YET.

A program to convert music specifications, from YAML format, into LilyPond (input) format.

It is written in Ruby.

##invocation

```bash
cd &lt;directory containing LilyPond movement directories&gt;
yaml2lilypond
```

##requirements

When yaml2lilypond is invoked, each tree below the current directory (in the filesystem) must contain the *.yml files of only a single musical movement (even if there is only one).

The easiest way is to make a subdirectory (in your LilyPond project), e.g., 'all-movements', and place the files pertaining to each musical movement in a separate, ('CHILD') subdirectory under it. For example, if your project were called, 'my-suite', then one of my-suite's filesystem children would be called, 'all-movements', and all-movements' children might be 'adagio', 'minuet' and 'sarabande'.

BTW, in LilyPond, you can and should be using relative paths, for example by specifying in your book.ly:

```lilypond
#(ly:set-option 'relative-includes #t)
```
Within each CHILD, there must be a file, 'template.yml' containing, for all the movement's measures:

* time signatures, and
* unique string identifiers

Any other *.yml files are converted to LilyPond input format. The output filenames will have the same full pathnames but with the extension, '.gly' (for 'generated Lilypond').
</t>
<t tx="georgesawyer.20110825192845.1923"></t>
<t tx="georgesawyer.20110827101921.1492"></t>
<t tx="georgesawyer.20110827101921.1493"></t>
<t tx="georgesawyer.20110827101921.1494">@language ruby
@others</t>
<t tx="georgesawyer.20110827101921.1500"></t>
<t tx="georgesawyer.20110827101921.1518">@others</t>
<t tx="georgesawyer.20110827101921.1519">@others</t>
<t tx="georgesawyer.20110827101921.1520">k='(Requi)-emAeternam'
test_instrument[k].content_no_barlines='hello'
        print test_instrument[k].content, "\n"
test_instrument[k].content='c4 d e f'
        print test_instrument[k].content, "\n"
test_instrument[k].content="r*#{test_instrument[k].time}"
        print test_instrument[k].content, "\n"</t>
<t tx="georgesawyer.20110827101921.1521">hello
| c4 d e f |
| r*12/4 |</t>
<t tx="georgesawyer.20110827101921.1552">@others</t>
<t tx="georgesawyer.20110827101921.1553">@others</t>
<t tx="georgesawyer.20110827101921.1628">def flatten a
  a=[a].flatten;2==a.length ? a : (a.push 4)}

end</t>
<t tx="georgesawyer.20110827152321.1531"></t>
<t tx="georgesawyer.20110827152321.1532"></t>
<t tx="georgesawyer.20110827152321.1533"></t>
<t tx="markdblackwell.20110823170927.1229">@language ruby</t>
<t tx="markdblackwell.20110823170927.1230">@language plain</t>
<t tx="markdblackwell.20110823170927.1258">class LilyPond #:nodoc: all
  &lt;&lt; constant &gt;&gt;
  @others
end</t>
<t tx="markdblackwell.20110823170927.1259">INDENT = ' '*2
LILYPOND_VERSION='2.14.1'</t>
<t tx="markdblackwell.20110823170927.1260"></t>
<t tx="markdblackwell.20110823170927.1261"></t>
<t tx="markdblackwell.20110823170927.1262">def self.rest; rest='r1*' end</t>
<t tx="markdblackwell.20110823170927.1263">def self.write_input_for_lilypond movement, instrument, filepath
  lilypond_variable_name, mode, overall_prefix = Main.three_keys
  a=Array.new
  a.push %Q@\\version "#{LILYPOND_VERSION}"@
  a.push "% This file was autogenerated. DO NOT MODIFY.\n"
  a.push "#{lilypond_variable_name} = {"
  a.push "#{INDENT}\\#{mode} {"
  overall_prefix.each{|e| a.push "#{INDENT}#{INDENT}#{e}"} unless overall_prefix.nil?
  a.push instrument.hash.values_at(*movement.measure_keys).map{|e| e.to_s}.join "\n"
  a.push "#{INDENT}}"
  a.push "}"
  s=a.join "\n"
  f=File.new filepath, 'w'
  f.print s, "\n"
  f.close
end</t>
<t tx="markdblackwell.20110823170927.1274">class Main #:nodoc: all
  &lt;&lt; class accessor &gt;&gt;
  @others
end</t>
<t tx="markdblackwell.20110823170927.1275">class &lt;&lt; self
  attr_reader :three_keys
end</t>
<t tx="markdblackwell.20110823170927.1277"></t>
<t tx="markdblackwell.20110823170927.1278"></t>
<t tx="markdblackwell.20110823170927.1279">def self.extract_three_keys lilypond_variable_request
  @three_keys=[
      (lilypond_variable_request.delete 'variable'),
      (lilypond_variable_request.delete 'mode'),
      (lilypond_variable_request.delete 'prefix') ]
end</t>
<t tx="markdblackwell.20110823170927.1280">def self.get_sole_yaml_document filepath
  y=UseYaml.get_yaml_documents filepath
  raise unless 1==y.length # Must be exactly one YAML document.
  y.first
end</t>
<t tx="markdblackwell.20110823170927.1281">def self.run
  caller = caller(0)
##print 'caller=';p caller
##print 'Movement.names=';p Movement.names
  Movement.names.each do |movement_name|
    movement = Movement.new movement_name
##print 'movement.filepaths.inspect=';p movement.filepaths.inspect
    movement.filepaths.each do |filepath|
##print 'filepath.to_s=';p filepath.to_s
      next if movement.is_template filepath
##print 'filepath.to_s=';p filepath.to_s
      lilypond_variable_request=get_sole_yaml_document filepath
      extract_three_keys lilypond_variable_request
      instrument=movement.template.clone
      run_requests instrument, lilypond_variable_request
      x=filepath.extname
      no_x=filepath.to_s.chomp x
      output_filepath=no_x.concat LilyPond.output_extension
##print 'output_filepath.to_s=';p output_filepath.to_s
      LilyPond.write_input_for_lilypond movement, instrument, output_filepath
    end
  end
  run_lilypond
end</t>
<t tx="markdblackwell.20110823170927.1282">def self.run_lilypond
  dos_separator= '\\'
  programs_directory  = 'Program Files'
  ## programs_directory  = 'progra'
  program_location = %w[C: LilyPond usr bin lilypond-windows.exe].insert(1,programs_directory).join dos_separator
  arguments = '-dgui book.ly'
  dos_quote = '"'
  ## `#{dos_quote}#{program_location}#{dos_quote} #{arguments}`
end</t>
<t tx="markdblackwell.20110823170927.1283">def self.run_requests instrument, lilypond_variable_request
##print 'instrument=';p instrument
  lilypond_variable_request.each do |measure_key,measure_request_vector|
##print 'instrument.hash=';p instrument.hash
    begin
      m=(measure=instrument.hash.fetch measure_key)
    rescue IndexError # Ruby 1.9.2 subclasses this to KeyError.
      raise "problem with key #{measure_key}; instrument is #{instrument}"
    end
    method_name='content' # Is default.
    until measure_request_vector.empty?
      data = measure_request_vector.shift
      (method_name=data; next) if VariableRequest.methods.include? data
      VariableRequest.execute_method method_name, measure, data
    end
  end
end</t>
<t tx="markdblackwell.20110823170927.1298">class Measure #:nodoc: all
  &lt;&lt; constant &gt;&gt;
  &lt;&lt; accessor &gt;&gt;
  &lt;&lt; single line method &gt;&gt;
  @others
end</t>
<t tx="markdblackwell.20110823170927.1299">BAR_SYMBOL = '|'
FILLER = 's'
INDENT = ' '*4</t>
<t tx="markdblackwell.20110823170927.1300">attr_reader :content, :time, :time_array</t>
<t tx="markdblackwell.20110823170927.1301">@others
</t>
<t tx="markdblackwell.20110823170927.1302">def content_no_barlines= s; @content = s end</t>
<t tx="markdblackwell.20110823170927.1303">def content= s; @content = "#{BAR_SYMBOL} #{s} #{BAR_SYMBOL}" end</t>
<t tx="markdblackwell.20110823170927.1304">def prefix s; @content = "#{s}\n" + @content end</t>
<t tx="markdblackwell.20110823170927.1305">def prefix_barlines s; @content = "#{BAR_SYMBOL} #{s} #{BAR_SYMBOL}\n" + @content end</t>
<t tx="markdblackwell.20110823170927.1306">def suffix s; @content += "\n#{s}" end</t>
<t tx="markdblackwell.20110823170927.1307">def suffix_barlines s; @content += "\n#{BAR_SYMBOL} #{s} #{BAR_SYMBOL}" end</t>
<t tx="markdblackwell.20110823170927.1308"></t>
<t tx="markdblackwell.20110823170927.1309"></t>
<t tx="markdblackwell.20110823170927.1310">def initialize k, ts, t
  @key = k
  @time_same = ts
  @time_array=[t].flatten; t = 2==t.length ? t : (t.push 4)
  count,beat = @time_array
  @time = "#{count}/#{beat}"
  default_music = "#{BAR_SYMBOL} #{FILLER}1*#{@time} #{BAR_SYMBOL}"
  @content = default_music
end</t>
<t tx="markdblackwell.20110823170927.1311">def to_s
  time_line = @time_same ? nil : "\\time #{@time}"
  key_line = "#{INDENT}% #{@key}"
  [time_line, @content, key_line].compact.join "\n"
end</t>
<t tx="markdblackwell.20110823170927.1320">class Template #:nodoc: all
  &lt;&lt; constant &gt;&gt;
  &lt;&lt; accessor &gt;&gt;
  @others
end</t>
<t tx="markdblackwell.20110823170927.1321">FIRST_MEASURE_TIME_COMPARISON_VALUE = false</t>
<t tx="markdblackwell.20110823170927.1322">attr_reader :hash, :measures</t>
<t tx="markdblackwell.20110823170927.1323"></t>
<t tx="markdblackwell.20110823170927.1324"></t>
<t tx="markdblackwell.20110823170927.1325">def create_measures keys, time_data
#  times=time_data.collect{|a| a=[a].flatten;2==a.length ? a : (a.push 4)}
  times=time_data.collect{|a| flatten a}
  time_same=(1...times.length).map{|i| times.at(i-1)==(times.at i)}
  time_same.unshift FIRST_MEASURE_TIME_COMPARISON_VALUE
  @measures=(keys.zip time_same, times).map{|k,ts,t| (Measure.new k,ts,t).freeze}
end</t>
<t tx="markdblackwell.20110823170927.1326">def initialize keys, time_data
  create_measures keys, time_data
  @hash=Hash[keys.zip @measures]
end</t>
<t tx="markdblackwell.20110823170927.1327">def initialize_copy source
  keys=@hash.keys
  @hash=Hash[keys.zip @hash.values_at(*keys).map{|e| e.dup}]
end</t>
<t tx="markdblackwell.20110823170927.1335">class UseYaml #:nodoc: all
  &lt;&lt; class accessor &gt;&gt;
  &lt;&lt; script &gt;&gt;
  @others
end</t>
<t tx="markdblackwell.20110823170927.1336">class &lt;&lt; self
  attr_reader :extension
end</t>
<t tx="markdblackwell.20110823170927.1338">@extension = %w[yml]</t>
<t tx="markdblackwell.20110823170927.1339"></t>
<t tx="markdblackwell.20110823170927.1340"></t>
<t tx="markdblackwell.20110823170927.1341">def self.get_yaml_documents filepath
  result=Array.new
  push_document=Proc.new{|e| result.push e}
  f=File.new filepath, 'r'
  YAML::load_documents f, &amp;push_document
  f.close
  result
end</t>
<t tx="markdblackwell.20110823170927.1348">class VariableRequest #:nodoc: all
  &lt;&lt; class accessor &gt;&gt;
  &lt;&lt; script &gt;&gt;
  @others
end</t>
<t tx="markdblackwell.20110823170927.1349">class &lt;&lt; self
  attr_reader :methods
end</t>
<t tx="markdblackwell.20110823170927.1350">@methods = (
    %w[prefix suffix].product(['',   '_barlines']) + 
    %w[content      ].product(['','_no_barlines'])
).map!{|a| a.join}</t>
<t tx="markdblackwell.20110823170927.1351"></t>
<t tx="markdblackwell.20110823170927.1352"></t>
<t tx="markdblackwell.20110823170927.1353">def self.execute_method method_name, measure, data
  m,d = measure,data
  case method_name
  when 'content'; m.content=d
  when 'prefix'; m.prefix d
  when 'suffix'; m.suffix d
  when 'content_no_barlines'; m.content_no_barlines=d
  when 'prefix_barlines'; m.prefix_barlines d
  when 'suffix_barlines'; m.suffix_barlines d
  else raise 'what?' end
end</t>
<t tx="markdblackwell.20110823170927.1366">class Movement #:nodoc: all
  &lt;&lt; constant &gt;&gt;
  &lt;&lt; accessor &gt;&gt;
  @others
end</t>
<t tx="markdblackwell.20110823170927.1367">MOVEMENTS_DIRECTORY=App.initial_current_directory</t>
<t tx="markdblackwell.20110823170927.1368">attr_reader :directory, :filepaths, :measure_keys, :template</t>
<t tx="markdblackwell.20110823170927.1369"></t>
<t tx="markdblackwell.20110823170927.1370"></t>
<t tx="markdblackwell.20110823170927.1371">&lt;&lt; rdoc &gt;&gt;
def self.names
##print 'MOVEMENTS_DIRECTORY.to_s=';p MOVEMENTS_DIRECTORY.to_s
  MOVEMENTS_DIRECTORY.entries.select do |e|
##print 'e.to_s=';p e.to_s
     MOVEMENTS_DIRECTORY.join(e).directory? &amp;&amp; ?.!=e.to_s[0]
  end.map(&amp;:to_s)
end</t>
<t tx="markdblackwell.20110823170927.1372"></t>
<t tx="markdblackwell.20110823170927.1373">def initialize s
##print 's=';p s
  @directory=MOVEMENTS_DIRECTORY.join s
  a = UseYaml.get_yaml_documents @directory.join 'template.yml'
##print 'a.inspect=';p a.inspect
  a=a.map{|e| e.nil? ? [] : e}
  @measure_keys, time_data = a
##print '@measure_keys=';p @measure_keys
##print 'time_data=';p time_data
  @template=Template.new @measure_keys, time_data
  @filepaths=get_filepaths
end</t>
<t tx="markdblackwell.20110823170927.1374">def is_template filepath
  f=filepath
  x=f.extname
  'template'==(f.basename.to_s.chomp x)
end</t>
<t tx="markdblackwell.20110823170927.1375">private</t>
<t tx="markdblackwell.20110823170927.1376">&lt;&lt; rdoc &gt;&gt;
def get_filepaths
  result=Array.new
  no_extension=Array.new
  @directory.find do |path|
    b=path.basename.to_s
    Find.prune if path.directory? &amp;&amp; ?.==b[0]
    next unless path.file?
    x = path.extname.to_s
##print 'x=';p x
    s=(! x.start_with? '.') ? x : x[1..-1]
    if UseYaml.extension.member? s
##print 'path.inspect=';p path.inspect
      result &lt;&lt; path
      no_extension &lt;&lt; path.dirname.join(b.chomp x)
    end
  end
  no_extension=no_extension.sort
  raise unless no_extension.uniq==no_extension
  result.sort.uniq
end</t>
<t tx="markdblackwell.20110823170927.1383">class App #:nodoc: all
  &lt;&lt; class accessor &gt;&gt;
  &lt;&lt; script &gt;&gt;
  @others
end</t>
<t tx="markdblackwell.20110823170927.1384">class &lt;&lt; self
#  attr_reader :my_root
  attr_reader :initial_current_directory
end</t>
<t tx="markdblackwell.20110823170927.1386"># @my_root = Pathname(__FILE__).join('..').cleanpath.realpath.dirname
@initial_current_directory = Pathname.pwd
</t>
<t tx="markdblackwell.20110823170927.1392">require 'yaml'
require 'pathname'
s=Pathname(__FILE__).join('..').cleanpath.realpath
$LOAD_PATH.unshift s
require 'app'
require 'lily_pond'
require 'main'
require 'measure'
require 'movement'
require 'template'
require 'use_yaml'
require 'variable_request'
</t>
<t tx="markdblackwell.20110823170927.1394">Main.run</t>
<t tx="markdblackwell.20110826175603.1481">def self.output_extension; '.gly' end</t>
<t tx="markdblackwell.20110827081420.1493"># Example: ['hostias']</t>
<t tx="markdblackwell.20110827081420.1506"># Example: soprano/note.yml</t>
</tnodes>
</leo_file>
